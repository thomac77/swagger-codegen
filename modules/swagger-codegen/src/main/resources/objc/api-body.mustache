{{#operations}}
#import "{{classname}}.h"
#import "SWGFile.h"
#import "BYUHTTPRequest.h"
{{#imports}}#import "{{import}}.h"
{{/imports}}

@interface {{classname}} ()
@property (nonatomic) NSMutableArray *requests;
@end

@implementation {{classname}}
static NSString * basePath = @"{{basePath}}";

{{#operation}}
-(void) {{nickname}}With{{#allParams}}{{paramName}}:({{{dataType}}}) {{paramName}}
        {{/allParams}}completionBlock: (void (^)({{#returnBaseType}}{{returnType}} output, {{/returnBaseType}}NSError* error))completionBlock
{

    NSMutableString* requestUrl = [NSMutableString stringWithFormat:@"%@{{path}}", basePath];

    // remove format in URL if needed
    if ([requestUrl rangeOfString:@".{format}"].location != NSNotFound)
        [requestUrl replaceCharactersInRange: [requestUrl rangeOfString:@".{format}"] withString:@".json"];

    {{#pathParams}}[requestUrl replaceCharactersInRange: [requestUrl rangeOfString:[NSString stringWithFormat:@"%@%@%@", @"{", @"{{baseName}}", @"}"]] withString:[NSString stringWithFormat:@"%@", {{paramName}}]];
    {{/pathParams}}

    NSString* requestContentType = @"application/json";
    NSString* responseContentType = @"application/json";

    NSMutableDictionary* queryParams = [[NSMutableDictionary alloc] init];
    {{#queryParams}}if({{paramName}} != nil)
        queryParams[@"{{baseName}}"] = {{paramName}};
    {{/queryParams}}
    NSMutableDictionary* headerParams = [[NSMutableDictionary alloc] init];
    {{#headerParams}}if({{paramName}} != nil)
        headerParams[@"{{baseName}}"] = {{paramName}};{{/headerParams}}

    {{#bodyParam}}
    id bodyDictionary = nil;
    id m_body = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}nil{{/bodyParam}};
    if(m_body != nil && [m_body isKindOfClass:[NSArray class]]){
        NSMutableArray * objs = [[NSMutableArray alloc] init];
        for (id dict in (NSArray*)m_body) {
            if([dict respondsToSelector:@selector(asDictionary)]) {
                [objs addObject:[(SWGObject*)dict asDictionary]];
            }
            else{
                [objs addObject:dict];
            }
        }
        bodyDictionary = objs;
    }
    else if([m_body respondsToSelector:@selector(asDictionary)]) {
        bodyDictionary = [(SWGObject*)m_body asDictionary];
    }
    else if([m_body isKindOfClass:[NSString class]]) {
        // convert it to a dictionary
        NSError * error;
        NSString * str = (NSString*)m_body;
        NSDictionary *JSON =
            [NSJSONSerialization JSONObjectWithData:[str dataUsingEncoding:NSUTF8StringEncoding]
                                            options:NSJSONReadingMutableContainers
                                              error:&error];
        bodyDictionary = JSON;
    }
    else if([m_body isKindOfClass: [SWGFile class]]) {
        requestContentType = @"form-data";
        bodyDictionary = m_body;
    }
    else{
        NSLog(@"don't know what to do with %@", m_body);
    }
    {{/bodyParam}}
    
    {{#requiredParamCount}}
    {{#requiredParams}}
    if({{paramName}} == nil) {
        // error
    }
    {{/requiredParams}}
    {{/requiredParamCount}}

    BYUHTTPRequest *request = [BYUHTTPRequest requestWithURL:[NSURL URLWithString:requestUrl] queryParams:queryParams];
    [self.requests addObject:request];

    request.requiresB64NonceHMAC = NO;
    [request addRequestHeader:@"Accept" value:responseContentType];
    [request addRequestHeader:@"Content-type" value:requestContentType];
    request.requestMethod = @"{{httpMethod}}";

    for (NSString *key in headerParams.allKeys) {
        [request addRequestHeader:key value:headerParams[key]];
    }
    
    {{#bodyParam}}
    request.postBody = [NSJSONSerialization dataWithJSONObject:bodyDictionary options:0 error:nil];
    {{/bodyParam}}
    
    [request startAsynchronousWithCompletionHandler:^(NSData *data, NSHTTPURLResponse *response, NSError *error) {
        {{#returnContainer}}{{>apiBodyResponseWithContainer}}{{/returnContainer}}
        {{#returnSimpleType}}
        {{#returnTypeIsPrimitive}}{{>apiPrimitiveResponse}}{{/returnTypeIsPrimitive}}
        {{#returnBaseType}}{{>apiNonPrimitiveResponse}}{{/returnBaseType}}
        {{/returnSimpleType}}
    }];
}


{{/operation}}
{{/operations}}
@end
